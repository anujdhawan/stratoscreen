<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
					creationComplete="creationCompleteHandler(event)" show="showHandler(event)" xmlns:view="com.stratoscreen.view.*" >
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.aws.SDBEvent;
			import com.stratoscreen.controller.ForeignKeyControl;
			import com.stratoscreen.events.ForeignKeyEvent;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.model.domains.ChannelDetail;
			import com.stratoscreen.model.domains.Channels;
			import com.stratoscreen.renderers.ChannelItem;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			private static const DETAIL_HEIGHT:int = 135;
			
			private var _appManager:AppManager;
			[Bindable] private var _channels:ArrayCollection;
			private var _deleteChannel:Channels;
			private var _shown:Boolean = false;
			private var _winEdit:WinChannelEdit;

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_appManager = this.parentApplication.appManager;
								
				if (!_shown) {showHandler(null);}
			}

			protected function showHandler(event:FlexEvent):void
			{
				if (!_shown)
				{
					channelDetail.addEventListener(GroupChannelDetail.DETAIL_CLOSE, detailCloseHandler);
					channelDetail.addEventListener(GroupChannelDetail.CHANNEL_DELETE, deleteChannelHandler);
					channelDetail.addEventListener(GroupChannelDetail.CHANNEL_EDIT, editChannelHandler);
					hideDetail();
					loadChannels();
					_shown = true;
				}
			}

			public function refresh():void
			{
				loadChannels();
			}
			
			private function loadChannels():void
			{
				var sql:String = "Select * from Channels where accountId='";
				sql += _appManager.currentUser.accountId + "'";
				_appManager.sdb.select(sql, loadChannelsHandler, Channels);
				
				this.parentDocument.enabled = false;				
			}
			
			private function loadChannelsHandler(event:SDBEvent):void
			{
				this.parentDocument.enabled = true;
				
				if (!event.success)
				{
					Alert.show("Could not load Channels. Please try again later", "Load Error");
					return;
				}
				
				_channels = new ArrayCollection();
				_channels.source = event.result as Array;				
				
				// Pass a reference to the parent. We will search from there
				this.parentDocument.childData = _channels;				
				
				// Default to a sort by name
				var sort:Sort = new Sort();
				sort.fields = [new SortField("name", true)];				
				_channels.sort = sort;
				_channels.refresh();		
				
				hideDetail();
			}

			private function hideDetail():void
			{
				channelDetail.height = 0;
				channelDetail.visible = false;	
			}
			
			private function detailCloseHandler(event:Event):void
			{
				hideDetail();
			}
			
			private function groupCloseHandler(event:Event):void
			{
				hideDetail();				
				
				// Reload if there was an update
				if (!event.target.canceled) {loadChannels();}
			}
			
			protected function btnAdd_clickHandler(event:MouseEvent):void
			{
				editChannelHandler(null);
				hideDetail();
			}
			
			public function itemClick(item:ChannelItem):void
			{
				channelDetail.height = DETAIL_HEIGHT;
				channelDetail.visible = true;
				channelDetail.channel = item.data as Channels;
			}
			
			private function editChannelHandler(event:Event):void
			{
				_winEdit = new WinChannelEdit();
				_winEdit.addEventListener(CloseEvent.CLOSE, winEditCloseHandler);
				_winEdit.width = this.parentApplication.width * .9;
				_winEdit.height = this.parentApplication.height * .9;				
				_winEdit.channel = (event == null) ? null : event.target.channel;
				
				// Save the reference to the window. The item renderer will need it
				_appManager.currentEditWindow = _winEdit;
				PopUpManager.addPopUp(_winEdit, this.parentApplication as DisplayObject, true);
			}
			
			private function winEditCloseHandler(event:Event):void
			{
				_appManager.currentEditWindow = null;
				hideDetail();				
				
				// Reload if there was an update
				if (!event.target.canceled) {loadChannels();}
			}			
			
			private function deleteChannelHandler(event:Event):void
			{
				_deleteChannel = event.target.channel;
				
				Alert.show("Do you want to " + _deleteChannel.name + "?", "Delete Channel", Alert.YES | Alert.NO,
					null, deleteAnswerHandler, null, Alert.NO); 
			}
			
			private function deleteAnswerHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.NO) 			
				{
					_deleteChannel = null;
					return;
				}
				
				var control:ForeignKeyControl = new ForeignKeyControl(_appManager);
				control.checkChannels(_deleteChannel.itemName, foreignKeyHandler);
			}
			
			private function foreignKeyHandler(event:ForeignKeyEvent):void
			{
				var msg:String;
				if (!event.success)
				{
					msg = "Could not confirm the file can be deleted. Please try again later";
					Alert.show(msg, "Foreign Key Error");
					this.parentDocument.enabled = true;
					return;
				}
				
				if (event.conflictFound)
				{
					msg = "Cannot delete " + _deleteChannel.name + ". It is being used in the ";
					msg += event.displayName + " table.\r\n";
					Alert.show(msg, "User Conflict");
					this.parentDocument.enabled = true;
					return;
				}

				this.parentDocument.enabled = false;
				_deleteChannel.deleted = true;
				_appManager.sdb.updateDomain([_deleteChannel], deleteChannelDataHandler);
			}
			
			private function deleteChannelDataHandler(event:SDBEvent):void
			{
				if (!event.success)
				{
					Alert.show("Could not delete " + _deleteChannel.name + ". Please try again", "Error Delete");
					this.parentDocument.enabled = true;
					return;
				}
				
				// Get a list of the Detail so we can delete
				var sql:String = "Select * from ChannelDetail where  channelId='";
				sql += _deleteChannel.itemName + "'";
				_appManager.sdb.select(sql, loadChannelDetailHandler, ChannelDetail);					
			}
			
			private function loadChannelDetailHandler(event:SDBEvent):void
			{
				if (!event.success)
				{
					Alert.show("Could not list " + _deleteChannel.name + " items for delete. " +
						"These items will need to be manually deleted", "Error Delete");
					this.parentDocument.enabled = true;
					return;
				}			
				
				var items:Array = event.result as Array;				
				for (var i:int = 0; i < items.length; i++)
				{
					items[i].deleted = true;	
				}
				
				// Run the update so the items can be deleted
				_appManager.sdb.updateDomain(items, deleteChannelDetailHandler);
			}
			
			private function deleteChannelDetailHandler(event:SDBEvent):void
			{
				try
				{
					if (!event.success)
					{
						Alert.show("Could not delete " + _deleteChannel.name + " items for delete. " +
							       "These items will need to be manually deleted", "Error Delete");
						return;
					}
				}
				finally
				{
					_deleteChannel = null;
					loadChannels();
				}
			}
		]]>
	</fx:Script>
	<s:VGroup x="0" y="0" width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		<s:BorderContainer height="100%" width="100%">
			<s:List x="5" y="5" height="100%" width="100%" itemRenderer=" com.stratoscreen.renderers.ChannelItem" dataProvider="{_channels}" borderVisible="false">
				<s:layout>
					<s:TileLayout orientation="rows"/>
				</s:layout>			
			</s:List>
			<mx:SWFLoader id="swfLoading" horizontalCenter="0" verticalCenter="0" width="25%" height="25%" 
						  source="@Embed('assets/swfs/spinner.swf')" autoLoad="true" visible="{!this.parentDocument.enabled}"/>			
		</s:BorderContainer>
		<view:GroupChannelDetail id="channelDetail" width="100%" />
		<s:HGroup width="100%">
			<s:Button id="btnAdd" label="Create Channel ..." click="btnAdd_clickHandler(event)"/>
			<mx:Spacer width="100%" />
		</s:HGroup>
	</s:VGroup>			
</s:NavigatorContent>
