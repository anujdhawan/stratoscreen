<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"  xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="com.stratoscreen.components.*" 
		 xmlns:view="com.stratoscreen.view.*" minHeight="600" minWidth="1000" 
		 creationComplete="creationCompleteHandler(event)" >
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.aws.SDBEvent;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.model.views.UsersHdr;
			import com.stratoscreen.utils.LogUtils;
			import com.stratoscreen.view.WinPreview;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;

			private const TAB_WIDTH:int = 73;
			[Bindable] private var _signedIn:Boolean = false;
			private var _appManager:AppManager;
			private var _winPassword:WinPasswordEdit;
			private var _winTerms:WinTerms;
			
			public function get signedIn():Boolean
			{
				return _signedIn; 
			}
			
			public function set signedIn(value:Boolean):void
			{
				// Adjust the tabs if not an Admin
				if (_appManager.currentUser.type != Constants.USER_TYPE_MANAGER)
				{
					// Move this off the screen. Hiding it is giving me issues
					tabAdmin.setStyle("left","-100");	
					tabAdmin.removeEventListener(TabButton.TAB_CLICKED, tabClickHandler);					

					var offset:int = tabHome.getStyle("right");
					tabHome.setStyle("right", offset - TAB_WIDTH);
					offset = tabMedia.getStyle("right");
					tabMedia.setStyle("right", offset - TAB_WIDTH);
					offset = tabChannels.getStyle("right");
					tabChannels.setStyle("right", offset - TAB_WIDTH);
					offset = tabScreens.getStyle("right");
					tabScreens.setStyle("right", offset - TAB_WIDTH);
				}
				
				groupBody.y = 10;
				_signedIn = value;
				vsMain.selectedChild = navHome;
				
				// This may be the first time the user has signed on
				// or the user is forced to change the password
				if (_appManager.currentUser.changePassword == "1")
				{
					this.callLater(changePassword);
				}
				
				// Make sure we they have agreed to the terms
				if (_appManager.currentUser.agreedToTerms != "1")
				{
					this.callLater(showTerms);
				}
				
				// Prefetch some data
				// Get the a sublist of users. We will need it for cross referencing later
				var sql:String = "Select firstName, lastName from Users where accountId='"; 
				sql += _appManager.currentAccount.itemName + "'";
				_appManager.sdb.select(sql, usersHdrLoadHandler, UsersHdr);
				
			}
			
			private function usersHdrLoadHandler(event:SDBEvent):void
			{
				try
				{
					_appManager.usersHdrs = event.result as Array;
					this.parentDocument.enabled = true;
				}
				catch (err:Error)
				{
					LogUtils.writeErrorToLog(err);
				}				
			}			
			
			public function showLargePreview(type:String, previewData:Object):void
			{
				var winPreview:WinPreview = new WinPreview();
				winPreview.width = this.width * Constants.EDIT_WINDOW_SIZE;
				winPreview.height = this.height * Constants.EDIT_WINDOW_SIZE;
				winPreview.previewType = type;
				winPreview.previewData = previewData;
				
				PopUpManager.addPopUp(winPreview, this, true);
			}
			
			private function changePassword():void
			{
				if (_winPassword == null)
				{
					_winPassword = new WinPasswordEdit();
					_winPassword.addEventListener(CloseEvent.CLOSE, passwordCloseHandler);
				}
				PopUpManager.addPopUp(_winPassword, this, true);
			}
			
			private function passwordCloseHandler(event:CloseEvent):void
			{
				// Do not allow the user to cancel out
				if (_winPassword.canceled)
				{
					changePassword();
					return;
				}
				
				_winPassword = null;
			}
			
			private function showTerms():void
			{
				_winTerms = new WinTerms();
				_winTerms.addEventListener(CloseEvent.CLOSE, termsCloseHandler);
				PopUpManager.addPopUp(_winTerms, this, true);
			}
			
			private function termsCloseHandler(event:Event):void
			{
				if (_winTerms.agreed)
				{
					// Update the db that they have agreed
					_appManager.currentUser.agreedToTerms = "1";
					_appManager.currentUser.termsDate = new Date();
					_appManager.currentUser.updated = true;
					
					_appManager.sdb.updateDomain([_appManager.currentUser], userUpdateHandler);
				}
				else
				{
					// No need to continue if they do not agree
					NativeApplication.nativeApplication.exit();
				}
			}
			
			private function userUpdateHandler(event:SDBEvent):void
			{
				if (!event.success)
				{
					Alert.show("There was an error saving to the database.\r\n" +
						       "You may be prompted again to agree to terms", "Update Error");
				}
			}
						
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_appManager = this.parentApplication.appManager;
				
					
				tabHome.selected = true;
				tabMedia.selected = false;
				tabChannels.selected = false;
				tabScreens.selected = false;
				tabAdmin.selected = false;
				tabHome.addEventListener(TabButton.TAB_CLICKED, tabClickHandler);
				tabMedia.addEventListener(TabButton.TAB_CLICKED, tabClickHandler);
				tabChannels.addEventListener(TabButton.TAB_CLICKED, tabClickHandler);				
				tabScreens.addEventListener(TabButton.TAB_CLICKED, tabClickHandler);				
				tabAdmin.addEventListener(TabButton.TAB_CLICKED, tabClickHandler);
				
				CONFIG::isDemo
				{
					lblTitle.text += " [DEMO]";
					lblTitleSmall.text += " [DEMO]";
				}
			}
			
			private function tabClickHandler(event:Event):void
			{
				if (!signedIn) {return;}
				
				tabHome.selected = false;
				tabMedia.selected = false;
				tabChannels.selected = false;
				tabScreens.selected = false;
				tabAdmin.selected = false;
				
				if (event.target == tabHome)
				{
					tabHome.selected = true;
					vsMain.selectedChild = navHome;
				}
				else if (event.target == tabMedia)
				{
					tabMedia.selected = true;
					vsMain.selectedChild = navMedia;			
				}
				else if (event.target == tabChannels)
				{
					tabChannels.selected = true;
					vsMain.selectedChild = navChannels;
				}
				else if (event.target == tabScreens)
				{
					tabScreens.selected = true;
					vsMain.selectedChild = navScreens;
				}
				else if (event.target == tabAdmin)
				{
					tabAdmin.selected = true;
					vsMain.selectedChild = navAdmin;
				}				
			}			
			
			public function showBilling():void
			{
				tabAdmin.selected = true;
				vsMain.selectedChild = navAdmin;
				navAdmin.panelIndex = 7;
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect id="rectBack" width="100%" height="100" >
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="#B1C5E7" />
				<s:GradientEntry color="#FFFFFF" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:Group width="100%" visible="{!_signedIn}">
		<mx:Image x="10" y="15" source="@Embed('assets/swfs/stratoLogo.swf')" height="40" width="60" smoothBitmapContent="true" scaleContent="true" maintainAspectRatio="true"/>
		<s:Label id="lblTitle" x="62" y="26" color="#404040" fontSize="24" fontWeight="bold"
				 text="StratoScreen Storyboard"/>		
	</s:Group>
	<s:Group  width="100%" visible="{_signedIn}">
		<mx:Image x="10" y="10" source="@Embed('assets/swfs/stratoLogo.swf')" height="24" width="33" smoothBitmapContent="true"  scaleContent="true" maintainAspectRatio="true"/>
		<s:Label id="lblTitleSmall" x="44" y="15" color="#404040" fontSize="14" fontWeight="bold"
				 text="StratoScreen Storyboard"/>		
	</s:Group>
	
	<s:Group id="groupBody" width="100%" height="100%" y="40">
		<s:BorderContainer left="10" bottom="10" right="10" top="30" styleName="Main" backgroundColor="#FFFFFF" contentBackgroundColor="#FFFFFF">
			<mx:ViewStack  id="vsMain" width="100%" height="100%"  >
				<view:NavSignin id="navSignIn" />
				<view:NavHome id="navHome" />
				<view:NavMedia id="navMedia" />
				<view:NavChannels id="navChannels" />
				<view:NavScreens id="navScreens" />
				<view:NavAdmin id="navAdmin" />
			</mx:ViewStack>
		</s:BorderContainer>
		<components:TabButton id="tabHome" label="Home" selected="true"  right="316" top="0" visible="{_signedIn}"/>
		<components:TabButton id="tabMedia" label="Media" selected="false"  right="243" top="0" visible="{_signedIn}"/>
		<components:TabButton id="tabChannels" label="Channels" selected="false"  right="170" top="0" visible="{_signedIn}"/>
		<components:TabButton id="tabScreens" label="Screens" selected="false"  right="97" top="0" visible="{_signedIn}"/>
		<components:TabButton id="tabAdmin" label="Admin" selected="false"  right="24" top="0" visible="{_signedIn}" />
	</s:Group>
</s:Group>
