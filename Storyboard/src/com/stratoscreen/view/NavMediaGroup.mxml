<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="com.stratoscreen.view.*" 
					xmlns:components="com.stratoscreen.components.*" width="100%" height="100%" 
					creationComplete="creationCompleteHandler(event)" show="showHandler(event)" >
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.aws.SDBEvent;
			import com.stratoscreen.controller.ForeignKeyControl;
			import com.stratoscreen.events.ForeignKeyEvent;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.model.domains.MediaGroupDetail;
			import com.stratoscreen.model.domains.MediaGroups;
			import com.stratoscreen.renderers.MediaGroupItem;
			import com.stratoscreen.renderers.MediaOverlayItem;
			import com.stratoscreen.renderers.MediaThumbItem;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			private static const DETAIL_HEIGHT:int = 135;
			private var _appManager:AppManager;
			private var _deleteGroup:MediaGroups;
			private var _shown:Boolean
			private var _groupEdit:WinMediaGroupEdit
			[Bindable] private var _groups:ArrayCollection
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_appManager = this.parentApplication.appManager;
				if (!_shown && groupDetail != null) {showHandler(null);}				
			}	
			
			protected function showHandler(event:FlexEvent):void
			{
				if (!_shown)
				{
					groupDetail.addEventListener(GroupMediaGroupDetail.DETAIL_CLOSE, detailCloseHandler);
					groupDetail.addEventListener(GroupMediaGroupDetail.GROUP_DELETE, deleteGroupHandler);
					groupDetail.addEventListener(GroupMediaGroupDetail.GROUP_EDIT, editGroupHandler);
					hideDetail();
					loadGroups();
					_shown = true;
				}
			}
			
			public function refresh():void
			{
				loadGroups();
			}

			private function loadGroups():void
			{
				var sql:String = "Select * from MediaGroups where accountId='";
				sql += _appManager.currentUser.accountId + "'";
				_appManager.sdb.select(sql, loadGroupsHandler, MediaGroups);
				
				this.parentDocument.enabled = false;
			}
			
			private function loadGroupsHandler(event:SDBEvent):void
			{
				this.parentDocument.enabled = true;
				
				if (!event.success)
				{
					Alert.show("Could not load Media Groups. Please try again later", "Load Error");
					return;
				}

				_groups = new ArrayCollection();
				_groups.source = event.result as Array;
				
				
				// Default to a sort by name
				var sort:Sort = new Sort();
				sort.fields = [new SortField("name", true)];				
				_groups.sort = sort;
				_groups.refresh();		
				
				// Pass a reference to the parent. We will search from there
				this.parentDocument.childData = _groups;	
				
				hideDetail();
			}
			
			
			private function detailCloseHandler(event:Event):void
			{
				hideDetail();
			}
			
			public function itemClick(item:MediaGroupItem):void
			{
				groupDetail.height = DETAIL_HEIGHT;
				groupDetail.visible = true;
				groupDetail.mediaGroup = item.data as MediaGroups;
			}
			
			private function editGroupHandler(event:Event):void
			{
				_groupEdit = new WinMediaGroupEdit();
				_groupEdit.addEventListener(CloseEvent.CLOSE, groupCloseHandler);
				_groupEdit.width = this.parentApplication.width * Constants.EDIT_WINDOW_SIZE;
				_groupEdit.height = this.parentApplication.height * Constants.EDIT_WINDOW_SIZE;
				_groupEdit.mediaGroup = (event == null) ? null : event.target.mediaGroup;
					
				// Save the reference to the window. The item renderer will need it
				_appManager.currentEditWindow = _groupEdit;
				PopUpManager.addPopUp(_groupEdit, this.parentApplication as DisplayObject, true);
			}
			
			private function groupCloseHandler(event:Event):void
			{
				_appManager.currentEditWindow = null;
				hideDetail();				
				
				// Reload if there was an update
				if (!event.target.canceled) {loadGroups();}
			}
			
			private function deleteGroupHandler(event:Event):void
			{
				_deleteGroup = event.target.mediaGroup;
				
				Alert.show("Do you want to " + _deleteGroup.name + "?", "Delete Group", Alert.YES | Alert.NO,
					null, deleteAnswerHandler, null, Alert.NO); 
			}
			
			private function deleteAnswerHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.NO) {return;}
				
				// Check for foreign keys first 
				var control:ForeignKeyControl = new ForeignKeyControl(_appManager);
				control.checkGroups( _deleteGroup.itemName, foreignKeyHandler);				
			}
			
			private function foreignKeyHandler(event:ForeignKeyEvent):void
			{
				var msg:String;
				if (!event.success)
				{
					msg = "Could not confirm the file can be deleted. Please try again later";
					Alert.show(msg, "Foreign Key Error");
					_deleteGroup = null;
					return;
				}
				
				if (event.conflictFound)
				{
					msg = "Cannot delete " + _deleteGroup.name + ". It is being used in the ";
					msg += event.displayName + " table.";
					Alert.show(msg, "Group Conflict");
					_deleteGroup = null;
					return;
				}
				
				this.parentDocument.enabled = false;
				_deleteGroup.deleted = true;
				_appManager.sdb.updateDomain([_deleteGroup], deleteGroupMediaHandler);
			}
			
			private function deleteGroupMediaHandler(event:SDBEvent):void
			{
				if (!event.success)
				{
					Alert.show("Could not delete " + _deleteGroup.name + ". Please try again", "Error Delete");
					this.parentDocument.enabled = true;
					return;
				}

				// Get a list of the Detail so we can delete
				var sql:String = "Select * from MediaGroupDetail where mediaGroupId='";
				sql += _deleteGroup.itemName + "'";
				_appManager.sdb.select(sql, loadGroupDetailHandler, MediaGroupDetail);					
			}
			
			private function loadGroupDetailHandler(event:SDBEvent):void
			{
				if (!event.success)
				{
					Alert.show("Could not list " + _deleteGroup.name + " items for delete. " +
						       "These items will need to be manually deleted", "Error Delete");
					this.parentDocument.enabled = true;
					return;
				}			
				
				var items:Array = event.result as Array;				
				for (var i:int = 0; i < items.length; i++)
				{
					items[i].deleted = true;	
				}
				
				// Run the update so the items can be deleted
				_appManager.sdb.updateDomain(items, deleteGroupDetailHandler);
			}

			private function deleteGroupDetailHandler(event:SDBEvent):void
			{
				try
				{
					if (!event.success)
					{
						Alert.show("Could not delete " + _deleteGroup.name + " items for delete. " +
							"These items will need to be manually deleted", "Error Delete");
						return;
					}
				}
				finally
				{
					_deleteGroup = null;
					loadGroups();
				}
			}

			private function hideDetail():void
			{
				groupDetail.height = 0;
				groupDetail.visible = false;	
			}	
			

			protected function btnAdd_clickHandler(event:MouseEvent):void
			{
				editGroupHandler(null);
				hideDetail();
			}

		]]>
	</fx:Script>
	<s:VGroup x="0" y="0" width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		<s:BorderContainer height="100%" width="100%">
			<s:List x="5" y="5" height="100%" width="100%" itemRenderer=" com.stratoscreen.renderers.MediaGroupItem" dataProvider="{_groups}" borderVisible="false">
				<s:layout>
					<s:TileLayout orientation="rows"/>
				</s:layout>			
			</s:List>
			<mx:SWFLoader id="swfLoading" horizontalCenter="0" verticalCenter="0" width="25%" height="25%" 
						  source="@Embed('assets/swfs/spinner.swf')" autoLoad="true" visible="{!this.parentDocument.enabled}"/>			
		</s:BorderContainer>		
		<view:GroupMediaGroupDetail id="groupDetail" width="100%" height="{DETAIL_HEIGHT}" />
		<s:HGroup width="100%">
			<s:Button id="btnAdd" label="Create Group ..."  click="btnAdd_clickHandler(event)"/>
			<mx:Spacer width="100%" />
		</s:HGroup>
	</s:VGroup>
</s:NavigatorContent>
