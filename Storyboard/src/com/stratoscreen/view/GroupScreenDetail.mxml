<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  xmlns:components="com.stratoscreen.components.*"
		 height="120" contentBackgroundAlpha="0.0"	 creationComplete="creationCompleteHandler(event)" 
		 hide="hideHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.aws.SDBEvent;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.model.domains.ScreenDetail;
			import com.stratoscreen.model.domains.Screens;
			import com.stratoscreen.utils.LogUtils;
			import com.stratoscreen.utils.Utils;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			
			public static const DETAIL_CLOSE:String = "DETAIL_CLOSE";
			public static const SCREEN_DELETE:String = "SCREEN_DELETE";
			public static const SCREEN_EDIT:String = "SCREEN_EDIT";
			
			[Bindable][Embed(source="/assets/icons/cross.png")]
			private var iconClose:Class;

			[Bindable] private var _screen:Screens;
			[Bindable] private var _screenDetail:ScreenDetail;
			[Bindable] private var _canEdit:Boolean = false;;	
			[Bindable] private var _pending:Boolean;
			[Bindable] private var _textAlpha:Number;
			private var _appManager:AppManager;
			private var _formatter:DateFormatter;
			private var _timeFormatter:DateFormatter;
			
			public function get screen_():Screens
			{
				return _screen;
			}
			
			public function set screen_(value:Screens):void
			{
				_screen = value;
				if (_screen == null) {return;}
				if (groupMain == null) {return;}    //still renedering
				
				updateFields();
			}

			
			private function updateFields():void
			{
				switch (_screen.device)
				{
					case Screens.DEVICE_PC:
						lblDevice.text = "Connected to a PC";
						break;

					case Screens.DEVICE_ANDROID:
						lblDevice.text = "Android";
						break;

					/*
					case ScreenDetail.TYPE_SAMSUNG_TV:
						lblType.text = "Samsung Smart TV";
						break;
					
					case ScreenDetail.TYPE_SAMSUNG_BLU_RAY:
						lblType.text = "Samsung Blu Ray";
						break;
					*/
					
					case Screens.DEVICE_STAND_ALONE:
						lblDevice.text = "Stand alone player";
						break;
					
					case Screens.DEVICE_UNKNOWN:
						lblDevice.text = "";
						break;

				}
				
				switch (_screen.viewMode)
				{
					case Constants.VIEW_STRETCH:
						lblViewMode.text = "Stretch";
						break;
					
					case Constants.VIEW_LETTERBOX:
						lblViewMode.text = "Letterbox";
						break;
					
					case Constants.VIEW_FULL:
						lblViewMode.text = "Full";
						break;
				}
				
				_canEdit = _appManager.currentUser.type == Constants.USER_TYPE_MANAGER;
				lblActivated.text = "";
				lblPing.text= "";;
				lblCreated.text = _formatter.format(_screen.createdDate);	
				lblOS.text = _screen.os;
				lblDimensions.text = formatNumber(_screen.screenWidth) + " x " + formatNumber(_screen.screenHeight);
				if (lblDimensions.text == "0 x 0" || lblDimensions.text == "0x0") {lblDimensions.text  = "";}	// Show nothing instead of 0xx
				lblSpace.text = Utils.formatBytes(parseFloat(formatNumber(_screen.spaceAvailable)));		
				lblBandwidth.text = Utils.formatBytes(parseFloat(formatNumber(_screen.bandwidth)));
				txtChanged.visible = false;	
				
				// Find the user who owns this item
				for (var i:int = 0; i < _appManager.usersHdrs.length; i++)
				{
					if (_appManager.usersHdrs[i].itemName == _screen.createdBy)
					{
						lblCreatedBy.text = _appManager.usersHdrs[i].firstName + " " + 
							_appManager.usersHdrs[i].lastName;
					}
				}	
				
				_pending = !_screen.activatedBool;
				_textAlpha = _pending ? 0.25 : 1;
				
				if (_screen.device  == Screens.DEVICE_STAND_ALONE) {_pending = false;}	// Do not need registered
					
				if (_pending)
				{
					lblStatus.text = "Pending";
					txtCode.text = _appManager.currentAccount.bucket + "-" + _screen.code;
				}
				else
				{
					if (_screen.isOnline)
					{
						switch (_screen.detailStatus)
						{
							case ScreenDetail.STATUS_DOWNLOADING:
								lblStatus.text = "Downloading Media";
								break;
							
							case ScreenDetail.STATUS_ERROR:
								lblStatus.text = "Error";
								break;
							
							case ScreenDetail.STATUS_PLAYING:
								lblStatus.text = "Playing Channel";
								txtChanged.visible = _screen.userChannelId != "";
								break;						
						}
					}
					else
					{
						lblStatus.text = "Offline";
					}
					
					lblPing.text = _timeFormatter.format(new Date(_screen.detailLastUpdateUTC));
					lblActivated.text = _formatter.format(_screen.activatedDate);
					txtCode.text = "";		
					
				}
				
				// Adjust the settings for a stand alone player
				if (_screen.device  == Screens.DEVICE_STAND_ALONE) 
				{
					lblStatus.text = "";
					lblPing.text = "";
					lblActivated.text = "";
				}	

			}
						
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_appManager = this.parentApplication.appManager;
				_formatter = new DateFormatter();
				_formatter.formatString = "MMM D, YYYY";

				_timeFormatter = new DateFormatter();
				_timeFormatter.formatString = "MMM D J:NN A";

				txtCode.text = "";
			}
			
			protected function hideHandler(event:FlexEvent):void
			{
			}
			
			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event(DETAIL_CLOSE));
			}
			
			protected function linkEdit_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event(SCREEN_EDIT));
			}
			
			protected function linkDelete_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event(SCREEN_DELETE));
			}

			private function formatNumber(value:String):String
			{
				var num:Number = parseFloat(value);
				if (num == 0 || isNaN(num) || num.toString() == "undefined") {return "0";}
				
				return num.toString();
			}

		]]>
	</fx:Script>
	<s:BorderContainer styleName="DetailBand" left="1" top="1" right="1" bottom="1" >
		<s:HGroup id="groupMain" width="100%" height="100%" verticalAlign="middle">
			<mx:Spacer width="0" />
			<s:Group height="100%" >
				<s:Label x="0" y="10" text="Name" fontWeight="bold"/>
				<s:Label x="75" y="10" text="{_screen.name}"/>
				<s:Label x="0" y="32" text="Device Type" fontWeight="bold" alpha="{_textAlpha}" />
				<s:Label id="lblDevice" x="75" y="32" text="" alpha="{_textAlpha}" />
				<s:Label x="0" y="54" text="View Mode" fontWeight="bold"/>
				<s:Label id="lblViewMode"  x="75" y="54" />
				<s:Label x="0" y="76" text="Status" fontWeight="bold"/>
				<s:Label id = "lblStatus" x="75" y="76" text=""/>
				<s:Label x="0" y="98" text="Code" fontWeight="bold" id="lblCode" visible="{_pending}"/>
				<s:Label id="txtCode" x="75" y="96" text="ABCDE-ABCDE" styleName="ActivateCode"  visible="{_pending}" typographicCase="uppercase"/>
				<s:Label id="txtChanged" x="75" y="96" color="#C06000" fontStyle="italic"
						 text="Channel changed on player" visible="false"/>
			</s:Group>
			<mx:Spacer width="10" />
			<s:Group id="groupSpecs" height="100%"  >
				<s:Label x="0" y="10" text="OS" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="10" text=" " id="lblOS" alpha="{_textAlpha}"/>
				<s:Label x="0" y="32" text="Screen Size" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="32" text=" " id="lblDimensions" alpha="{_textAlpha}"/>
				<s:Label x="0" y="54" text="Free Space" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="54" text=" " id="lblSpace" alpha="{_textAlpha}"/>
				<s:Label x="0" y="76" text="Bandwidth" fontWeight="bold" alpha="{_textAlpha}" toolTip="Monthly Bandwidth"/>
				<s:Label x="75" y="74" text=" " id="lblBandwidth" alpha="{_textAlpha}"/>
			</s:Group>		
			<mx:Spacer width="10" />
			<s:Group height="100%" >
				<s:Label x="0" y="10" text="Last Ping" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="10" text=" " id="lblPing" alpha="{_textAlpha}"/>
				<s:Label x="0" y="32" text="Activated" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="32" text=" " id="lblActivated" alpha="{_textAlpha}"/>
				<s:Label x="0" y="54" text="Created" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="54" text=" " id="lblCreated" alpha="{_textAlpha}"/>
				<s:Label x="0" y="76" text="Created by" fontWeight="bold" alpha="{_textAlpha}"/>
				<s:Label x="75" y="76" text=" " id="lblCreatedBy" alpha="{_textAlpha}"/>
			</s:Group>		
			<mx:Spacer width="100%" />
			<s:VGroup height="100%"  paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" textAlign="right" horizontalAlign="right">				
				<s:HGroup width="100%">
					<mx:Spacer width="100%" />
					<components:IconButton id="btnClose" click="btnClose_clickHandler(event)" icon="{iconClose}" />
				</s:HGroup>
				<mx:Spacer height="100%" />
				<components:IconButton label="Edit Screen" id="linkEdit" icon="@Embed(source='/assets/icons/pencil.png')" width="{linkDelete.width}"
							   click="linkEdit_clickHandler(event)" enabled="{_canEdit}"/>
				<components:IconButton label="Delete Screen" id="linkDelete" icon="@Embed(source='/assets/icons/delete.png')" 
							   click="linkDelete_clickHandler(event)" enabled="{_canEdit}" isDelete="true"/>
			</s:VGroup>
		</s:HGroup>
	</s:BorderContainer>
</s:Group>
