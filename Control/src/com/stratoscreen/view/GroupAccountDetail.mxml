<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"  xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="com.stratoscreen.components.*" width="100%" height="135" 
		 creationComplete="creationCompleteHandler(event)" contentBackgroundAlpha="0.0">
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.aws.SDBEvent;
			import com.stratoscreen.controller.StreamControl;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.model.domains.*;
			import com.stratoscreen.model.views.*;
			import com.stratoscreen.utils.SecurityUtils;
			import com.stratoscreen.utils.Utils;
			
			import mx.controls.Alert;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			public static const DETAIL_CLOSE:String = "DETAIL_CLOSE";
			
			[Bindable][Embed(source="/assets/icons/cross.png")]
			private var iconClose:Class;

			[Bindable] private var _account:Accounts;
			private var _appManager:AppManager;
			private var _streamControl:StreamControl;
			
			public function get account():Accounts
			{
				return _account;
			}
			
			public function set account(value:Accounts):void
			{
				_account = value;
								
				if (_appManager == null) {return;} // Still loading
				if (_account == null) {return;}
				
				// Combine the city state and zip to one row
				var csz:String = _account.city;
				if (_account.city != "" && _account.state != "") {csz += ", "}
				csz += (" " + _account.zip);
				csz = StringUtil.trim(csz);
				
				lblCSZ.text = csz;
				
				var formatter:DateFormatter = new DateFormatter();
				formatter.formatString = "MMM D, YYYY";
				lblCreated.text = formatter.format(_account.createdDate);
				
				getSummaries();
			}
			
			private function getSummaries():void
			{
				// Load other information about the account
				var sql:String = "Select count(*) from Users where accountId='" +  _account.itemName + "'";
				sql += " and type='" + Constants.USER_TYPE_MANAGER + "'";
				_appManager.sdb.select(sql, queryMgrCountHandler, CountRows);				
				
				sql = "Select count(*) from Users where accountId='" +  _account.itemName + "'";
				sql += " and type='" + Constants.USER_TYPE_USER + "'";
				_appManager.sdb.select(sql, queryUserCountHandler, CountRows);	
				
				if (_account.streaming == "1")
				{
					_streamControl.getDistributionStatus(_account.cloudFrontId, streamStatusHandler);
				}
			}
			
			private function queryMgrCountHandler(event:SDBEvent):void
			{
				lblMgrCount.text = event.result[0].Count;
			}	
			
			private function queryUserCountHandler(event:SDBEvent):void
			{
				lblUserCount.text = event.result[0].Count;
			}			
			
			public function get data():Object
			{
				return _account as Object;
			}			

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_appManager = this.parentApplication.appManager;
				_streamControl = new StreamControl(_appManager); 
				this.account = _account;				
			}


			protected function linkAddUser_clickHandler(event:MouseEvent):void
			{				
				// Before we start we have to load the existing emails
				_appManager.sdb.select("Select email from Users", queryEmailHandler, UserEmails);	
				this.enabled = false;				
			}

			private function queryEmailHandler(event:SDBEvent):void
			{
				this.enabled = true;
				if (!event.success)
				{
					Alert.show("Could not get current user list. Please try again later", "Query Error");
					return;
				}		
				
				// Save the emails only to the string
				var allEmails:Array = new Array();
				for (var i:int = 0; i < event.result.length; i++)
				{
					allEmails.push(event.result[i].email);
				}
				
				var winEdit:WinEditUser = new WinEditUser();
				winEdit.allEmails = allEmails;
				winEdit.user = new Users();
				winEdit.user.accountId = _account.itemName;
				winEdit.user.newUser = true;
				winEdit.user.decryptedPassword = "PWD" + Utils.randomEasyReadString(5);
				winEdit.addEventListener(CloseEvent.CLOSE, winEditCloseHandler);
				PopUpManager.addPopUp(winEdit, this.parentApplication as DisplayObject, true);
			}
			
			private function winEditCloseHandler(event:Event):void
			{
				if (!event.target.canceled)
				{
					// Update the tabel for the single user 
					var user:Users = event.target.user;
					_appManager.sdb.updateDomain([user], updateUserHandler);				
				}
			}				
			
			private function updateUserHandler(event:SDBEvent):void
			{
				this.enabled = true;
				if (!event.success)
				{
					Alert.show("Could create new user. Please try again later", "Update Error");
					return;
				}	
				
				getSummaries();
			}

			protected function linkAccount_clickHandler(event:MouseEvent):void
			{
				NavAccounts(this.parentDocument).editAccount(_account);
			}


			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent(new Event(DETAIL_CLOSE));
			}


			protected function lblRefresh_clickHandler(event:MouseEvent):void
			{
				lblStreamStatus.text = "";
				if (_account.cloudFrontId == "") {return;}
				_streamControl.getDistributionStatus(_account.cloudFrontId, streamStatusHandler);
			}
			
			private function streamStatusHandler():void
			{
				if (_streamControl.success)
				{
					lblStreamStatus.text = _streamControl.cfStatus;	
					if (_streamControl.cfEnabled)
					{
						lblStreamStatus.toolTip = "";				
					}
					else
					{
						lblStreamStatus.text += "*";
						lblStreamStatus.toolTip = "CloudFront distribution disabled";
					}
				}
				else
				{
					lblStreamStatus.text = "Could not retrieve ";	
				}
			}

		]]>
	</fx:Script>
	<s:BorderContainer styleName="DetailBand" left="1" top="1" right="1" bottom="1">
		<s:HGroup width="100%" height="100%">
			<s:Group height="100%" width="100%">
				<s:Label x="5" y="6" text="Name" fontWeight="bold"/>
				<s:Label x="66" y="6" text="{_account.name}" width="100%" />
				<s:Label x="5" y="26" text="Company" fontWeight="bold"/>
				<s:Label x="66" y="26" text="{_account.companyName}" width="100%"/>				
				<s:Label x="5" y="44" text="Address" fontWeight="bold"/>
				<s:Label x="66" y="44" text="{_account.address1}" width="100%"/>
				<s:Label x="66" y="62" text="{_account.address2}" width="100%"/>
				<s:Label x="66" y="80" width="100%" id="lblCSZ" text="  "/>
				<s:Label x="5" y="98" text="Contact" fontWeight="bold"/>
				<s:Label x="66" y="98" width="100%" text="{_account.contactName}"/>
				<s:Label x="66" y="116" width="100%" text="{_account.email}"/>				
			</s:Group>
			<s:Group height="100%" width="100%">
				<s:Label x="5" y="6" text="Created" fontWeight="bold"/>
				<s:Label id="lblCreated" x="66" y="6" width="100%"  text=" "/>
				<s:Label x="5" y="24" text="Managers" fontWeight="bold"/>
				<s:Label id="lblMgrCount" x="66" y="24" width="100%" text=" "/>								
				<s:Label x="5" y="44" text="Users" fontWeight="bold"/>
				<s:Label id="lblUserCount" x="66" y="44" width="100%" text=" "/>								
				<s:Label x="5" y="62" text="Stream Domain" fontWeight="bold" visible="{_account.streaming == '1'}"/>
				<s:Label x="5" y="80" text="Stream Status" fontWeight="bold" visible="{_account.streaming == '1'}"/>
				<s:Label x="100" y="62" id="lblStreamDomain" text="{_account.streamDomain}" visible="{_account.streaming == '1'}"/>
				<s:HGroup x="100" y="80">
					<s:Label id="lblStreamStatus" visible="{_account.streaming == '1'}" />
					<s:Label id="lblRefresh" text="Refresh"  textDecoration="underline" color="#0000FF" click="lblRefresh_clickHandler(event)" visible="{_account.streaming == '1'}" fontSize="9" useHandCursor="true" buttonMode="true"/>
				</s:HGroup>
			</s:Group>				
			<s:VGroup height="100%" maxWidth="125" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" textAlign="right">				
				<s:HGroup width="100%">
					<mx:Spacer width="100%" />
					<components:IconButton id="btnClose" click="btnClose_clickHandler(event)" icon="{iconClose}" />
				</s:HGroup>
				<mx:Spacer height="100%" />
				<mx:LinkButton label="Edit Account" icon="@Embed(source='/assets/icons/pencil.png')" id="linkAccount" click="linkAccount_clickHandler(event)" width="100%"/>
				<mx:LinkButton label="Add User" id="linkAddUser" click="linkAddUser_clickHandler(event)" icon="@Embed(source='/assets/icons/user_add.png')" width="100%"/>
			</s:VGroup>
		</s:HGroup>
	</s:BorderContainer>
</s:Group>
