<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="com.stratoscreen.components.*" 
		 preinitialize="preinitializeHandler(event)"  creationComplete="creationCompleteHandler(event)" 
		 removedFromStage="removedFromStageHandler(event)" >
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.PlayerConstants;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.managers.DataManager;
			import com.stratoscreen.managers.EffectsManager;
			import com.stratoscreen.model.domains.OverlayDetail;
			import com.stratoscreen.utils.LogUtils;
			
			import mx.core.IVisualElement;
			import mx.effects.Parallel;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
			import spark.core.SpriteVisualElement;
			
			private static const CYCLES_PER_SECOND:int = 3;		// Keep as low as possible 
			
			public static var appManager:AppManager;
			public static var dataManager:DataManager;
			
			[Bindable] private var _overlayDetail:OverlayDetail;
			private var _effectsManager:EffectsManager;
			private var _startTime:int;
			private var _endTime:int;
			private var _startFrame:int;
			private var _endFrame:int;
			private var _timer:Timer = null;			
			private var _paused:Boolean;
			private var _useFrameCount:Boolean;
			private var _loadSubmitted:Boolean = false;
			[Bindable] private var _alpha:Number = 1;
			private var _loader:Loader;
			private var _effectOut:Object;
			
			public var currentFrame:int;
			
			public override function get alpha():Number
			{
				return _alpha;	
			}
			
			public override function set alpha(value:Number):void
			{
				_alpha = value;
			}
			
			protected function preinitializeHandler(event:FlexEvent):void
			{				
				_effectsManager = new EffectsManager();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{				
				var startVisible:Boolean = false;
				
				if (_timer == null) {startVisible = true;}
				if (_useFrameCount)
				{
					startVisible = _startFrame == 0;
				}
				else
				{
					startVisible = _startTime == 0;
				}				
				
				if (_timer != null) {_timer.start();}
				this.visible = startVisible;
				
				if (startVisible) 
				{
					loadSwf(_overlayDetail.localUrl);
					_loadSubmitted = true;
				}
				
				this.filters = _overlayDetail.filters;
			}
			
			
			private function loadSwf(source:String):void
			{
				if ( _overlayDetail.isSWF)
				{
					var bytes:ByteArray = new ByteArray();
					var path:String = appManager.mediaFolder().resolvePath(_overlayDetail.mediaId).nativePath;
					var file:File = new File(path);
					if (!file.exists) {return;}	// The content is not loaded yet
					
					var stream:FileStream = new FileStream();
					stream.open(file, FileMode.READ);					
					stream.readBytes(bytes, 0, stream.bytesAvailable);
					stream.close();
	
					var context:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);
					context.allowCodeImport = true;
					context.parameters = new Object();
					context.parameters[PlayerConstants.QUERYSTRING_STATE] = escape(dataManager.screen_.state);
					context.parameters[PlayerConstants.QUERYSTRING_ZIP] = escape(dataManager.screen_.zip);
					context.parameters[PlayerConstants.QUERYSTRING_ID] = escape(dataManager.screen_.itemName);
				}
				
				_loader = new Loader();
				_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loader_Handler);
				_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loader_Handler);
				
				if ( _overlayDetail.isSWF)
				{
					_loader.loadBytes(bytes, context);
				}
				else
				{
					_loader.load(new URLRequest(source));					
				}
			}
			
			protected function loader_Handler(event:Event):void
			{
				event.target.removeEventListener(Event.COMPLETE, loader_Handler);
				event.target.removeEventListener(IOErrorEvent.IO_ERROR, loader_Handler);
				
				if ( _overlayDetail.isImage)
				{
					_loader.width = this.width;
					_loader.height = this.height;
				}
				
				_loader.alpha = parseFloat(_overlayDetail.alpha);
				uiHolder.addChild(_loader);					
				
				if ((event is IOErrorEvent)) 
				{
					return;
				}

				// Play the effects				
				var detailAlpha:Number = parseFloat(_overlayDetail.alpha);
				var detailRotate:Number = parseFloat(_overlayDetail.rotate);
				switch (overlayDetail.effectId)
				{
					case EffectsManager.EFFECT_FADE:
						var fade:Fade = _effectsManager.fadeIn(effectInEndHandler, 0, detailAlpha);
						_effectOut = _effectsManager.fadeOut(effectOutEndHandler, detailAlpha, 0);
						fade.play([uiHolder]);
						break;
					
					case EffectsManager.EFFECT_SPIN:
						var spin:Parallel = _effectsManager.spinIn(effectInEndHandler, 360, 0, 0, detailAlpha);
						_effectOut = _effectsManager.spinOut(effectOutEndHandler, 0, 360, detailAlpha, 0);
						spin.play([uiHolder]);
						break;
					
					case EffectsManager.EFFECT_SLIDE:
						var detailX:Number = parseFloat(overlayDetail.x);
						var detailWidth:Number = parseFloat(overlayDetail.width);
						var slide:Parallel = _effectsManager.slideIn(effectInEndHandler, detailX - detailWidth, detailX, 0, detailAlpha);
						_effectOut = _effectsManager.slideOut(effectOutEndHandler, detailX, detailX - detailWidth, detailAlpha, 0 );
						slide.play([uiHolder]);
						break;
					
					default:
						_effectOut = null;
						this.callLater(effectInEndHandler);
				}
				
			}
			
			protected function removedFromStageHandler(event:Event):void
			{
				if (_timer != null) {_timer.stop();} // Watch for lingering timers
				for (var i:int = uiHolder.numChildren - 1; i >= 0; i--)
				{
					uiHolder.removeChildAt(i);
				}
				this.removeAllElements();
			}
			
			public function get paused():Boolean
			{
				return _paused;
			}
			
			public function set paused(value:Boolean):void
			{
				_paused = value;	
				if (_timer == null) {return;}
				_paused ?  _timer.stop() : _timer.start(); 
			}
			
			public function get overlayDetail():OverlayDetail
			{
				return _overlayDetail;
			}
			
			public function set overlayDetail(value:OverlayDetail):void
			{
				_overlayDetail = value;
				
				// Create the timers if needed
				_startTime = parseInt(_overlayDetail.startTime);
				_endTime = parseInt(_overlayDetail.endTime);
				_startFrame = parseInt(_overlayDetail.startFrame);
				_endFrame = parseInt(_overlayDetail.endFrame);
				
				// Watch for instance where the start is added but not the end
				if (_startTime > 0 && _endTime == 0) {_endTime = int.MAX_VALUE;}
				if (_startFrame > 0 && _endFrame == 0) {_endFrame = int.MAX_VALUE;}				
				
				if (_startTime > 0 || _endTime > 0 || _startFrame > 0 || _endFrame > 0)
				{
					var delay:Number = 1000 / CYCLES_PER_SECOND;
					
					_timer = new Timer(delay);
					_timer.addEventListener(TimerEvent.TIMER, timerHandler)
				}				
				_useFrameCount =  (_startFrame > 0 && _endFrame > 0); 
			}
			
			private function timerHandler(event:TimerEvent):void
			{
				var secondsElapsed:int = _timer.currentCount / CYCLES_PER_SECOND;
				
				// Hide or show depandant on the time
				if (_useFrameCount)
				{
					if (this.currentFrame >= _startFrame && !_loadSubmitted) 
					{
						loadSwf(_overlayDetail.localUrl);
						if (!this.visible) {this.visible = true;}
						_loadSubmitted = true;
					}
					
					if (this.currentFrame >= _endFrame) {playEffectOut();}
				}				
				else
				{
					if (secondsElapsed >= _startTime && !_loadSubmitted) 
					{
						loadSwf(_overlayDetail.localUrl);
						if (!this.visible) {this.visible = true;}
						_loadSubmitted = true;
					}
					
					if (secondsElapsed >= _endTime) {playEffectOut();}
				}
			}	
			
			private function playEffectOut():void
			{
				_timer.stop();
				
				if (_effectOut == null)
				{
					this.visible = false;
					this.callLater( effectOutEndHandler);
				}
				else
				{
					// Play the opposite efect
					_effectOut.play([this]);
				}				
			}
			
			protected function effectInEndHandler(event:Event = null):void
			{
			}
			
			protected function effectOutEndHandler(event:Event = null):void
			{
				this.removeAllElements();
			}
		]]>
	</fx:Script>
	<mx:UIComponent id="uiHolder" width="100%" height="100%">
		
	</mx:UIComponent>
</s:Group>
