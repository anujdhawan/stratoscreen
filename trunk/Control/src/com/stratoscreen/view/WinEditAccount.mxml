<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="678" title="Edit Account" 
			   creationComplete="creationCompleteHandler(event)" close="closeHandler(event)" xmlns:components="com.stratoscreen.components.*">
	<fx:Declarations>
		<mx:StringValidator id="validAccount" source="{txtName}" property="text" />
		<mx:StringValidator id="validCompany" source="{txtCompanyName}" property="text" />
		<mx:EmailValidator id="validEmail" source="{txtContactEmail}" property="text" />
		<mx:StringValidator id="validContact" source="{txtContactEmail}" property="text" />
		<mx:StringValidator id="validState" source="{txtState}" property="text" />
		<mx:StringValidator id="validZip" source="{txtZip}" property="text" />
	</fx:Declarations>	
	<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.aws.*;
			import com.stratoscreen.events.InstallEvent;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.model.domains.*;
			import com.stratoscreen.model.views.UserEmails;
			import com.stratoscreen.resources.NewAccountEmail;
			import com.stratoscreen.resources.NewUserEmail;
			import com.stratoscreen.utils.LogUtils;
			import com.stratoscreen.utils.SecurityUtils;
			import com.stratoscreen.utils.Utils;
			import com.stratoscreen.utils.XMLUtils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;

			public var newAccount:Boolean;
			public var canceled:Boolean = true;
			public var deleted:Boolean = false;
						
			[Bindable] private var _account:Accounts;
			[Bindable] private var _accountUsers:ArrayCollection;		
			[Bindable] private var _isDirty:Boolean = false;		
			private var _appManager:AppManager;
			private var _controlPanel:ControlPanel;			
			private var _winEditUser:WinEditUser;
			private var _winProcess:WinProcess;	
			private var _usersLoaded:Boolean = false;
			private var _allBucketsLoaded:Boolean = false;	
			private var _allEmailsLoaded:Boolean = false;
			private var _allBuckets:Array;
			private var _allEmails:Array;
			private var _useAsContentAccount:Boolean = false;
			private var _streaming:Boolean = false;
			
			public function set account(value:Accounts):void
			{
				// Copy the account into a new object
				// We do not want to overwrite the orinal
				_account = Utils.copyClassObject(Accounts, value);
				_account.updated = true;
				
				SecurityUtils.accountCode = _account.bucket;
				
				if (chkContentAccount != null)
				{
					chkContentAccount.selected = _appManager.settings.contentAccountId == _account.itemName;
				}
			}
			
			public function get account():Accounts
			{
				return _account;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				PopUpManager.centerPopUp(this);
				_controlPanel = this.parentApplication as ControlPanel; 
				_appManager = _controlPanel.appManager;				
				_accountUsers = new ArrayCollection()
				_accountUsers.filterFunction = filterDeleted;	// Hide the deleted users but pass to the server for deletion
				
				if (newAccount)
				{
					btnUpdate.label = "Create";
					btnDelete.visible = false;
					btnLock.visible = false;
				}

				_useAsContentAccount = _appManager.settings.contentAccountId == _account.itemName;
				_streaming = _account.streaming == "1";
				
				chkStream.selected = _streaming;
				chkStream.enabled = !_streaming;	// Only allow to turn on for now
				chkContentAccount.selected = _useAsContentAccount;
				stepLicenses.value = parseInt(_account.licenseCount);
				//stepStandAlone.value = parseInt(_account.standAloneCount);
				
				ddStorage.selectedIndex = 0;
				for (var i:int = 0; i < ddStorage.dataProvider.length; i++)
				{
					if (ddStorage.dataProvider[i].value == _account.mediasSize)
					{
						ddStorage.selectedIndex = i;
						break;
					}					
				}

				ddBandwidth.selectedIndex = 0;
				for (i = 0; i < ddBandwidth.dataProvider.length; i++)
				{
					if (ddBandwidth.dataProvider[i].value == _account.bandwidth)
					{
						ddBandwidth.selectedIndex = i;
						break;
					}					
				}

				ddBilling.selectedIndex = 0;
				for (i = 0; i < ddBilling.dataProvider.length; i++)
				{
					if (ddBilling.dataProvider[i].value == _account.billingType)
					{
						ddBilling.selectedIndex = i;
						break;
					}					
				}

				// Get the account users
				this.enabled = false;
				CursorManager.setBusyCursor();
				
				var sql:String = "Select * from Users where accountId='" + _account.itemName + "' ";
				sql += " and email is not null order by email"; 
				_appManager.sdb.select(sql, queryUsersHandler, Users);
				
				// Get the list of buckets to check for dups
				_appManager.s3.listAllBuckets(listBucketsHandler);
				
				// get the list of emails to check for dups
				_appManager.sdb.select("Select email from Users", queryEmailHandler, UserEmails);					
			}
			
			private function queryUsersHandler(event:SDBEvent):void
			{
				CursorManager.removeBusyCursor();
				
				if (event.result is Array)
				{
					_accountUsers.source = event.result as Array;
					
					// Make the first row a place holder for creating a new user
					var user:Users = new Users();
					user.type = "";
					user.email = "(new user)"; 
					user.updated = false;	// Do not write this to the database	
					
					_accountUsers.addItemAt(user,0);
				}
				
				_usersLoaded = true;
				this.enabled = _usersLoaded && _allBucketsLoaded && _allEmailsLoaded;
			}			

			private function queryEmailHandler(event:SDBEvent):void
			{
				this.enabled = true;
				if (!event.success)
				{
					Alert.show("Could not get current user list. Please try again later", "Query Error");
					return;
				}		
				
				// Save the emails only to the string
				_allEmails = new Array();
				for (var i:int = 0; i < event.result.length; i++)
				{
					_allEmails.push(event.result[i]);
				}
					
				_allEmailsLoaded = true;
				this.enabled = _usersLoaded && _allBucketsLoaded && _allEmailsLoaded;				
			}
			
			private function listBucketsHandler(event:Object):void
			{
				try
				{
					var result:Object = XMLUtils.stringToObject(event.result.toString());
					var bucketList:Array = new Array();
					_allBuckets = new Array();
					
					if (result.ListAllMyBucketsResult.Buckets.Bucket is Array)
					{
						bucketList = result.ListAllMyBucketsResult.Buckets.Bucket;
					}
					else
					{
						bucketList.push(result.ListAllMyBucketsResult.Buckets.Bucket);
					}
					
					// Save all the possible StratoScreen buckets into a work array
					for each (var bucket:Object in bucketList)
					{
						_allBuckets.push(bucket.Name);
					}
					
					_allBucketsLoaded = true;
					this.enabled = _usersLoaded && _allBucketsLoaded && _allEmailsLoaded;
				}
				catch (err:Error)
				{
					Alert.show(err.message, "Query Error");
					LogUtils.writeErrorToLog(err);
				}
			}
			protected function closeHandler(event:CloseEvent):void
			{
				if (event == null) {this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));}
				PopUpManager.removePopUp(this)
			}

			protected function btnUpdate_clickHandler(event:MouseEvent):void
			{
				// Validate the fields		
				if (!validFields()) {return;}
				
				// Prompt the user for major changes.
				var message:String = "";
			
				if (_useAsContentAccount != chkContentAccount.selected)
				{
					message +=  chkContentAccount.selected ? 
                               "You are about to change the default content account to this account.\r\n" :
							   "You are removing this account as the default content account. You will need to select a new content account.\r\n";
					_account.useForSampleContent = true;
				}
					
				if (chkStream.selected != _streaming)
				{
					message +=  "You are about to enable streaming media for this account.\r\n";
				}

				if (ddStorage.selectedItem.value != _account.mediasSize)
				{
					message +=  "You are changing the maximum storage for this account\r\n";
				}

				if (ddBandwidth.selectedItem.value != _account.bandwidth)
				{
					message +=  "You are changing the bandwidth per screen for this account\r\n";
				}

				if (message == "")
				{
					// No major change. Go with update
					startPerformUpdate(null);
				}
				else
				{
					message += "Do you want to continue?";
					Alert.show(message, "Confirm Changes", Alert.YES | Alert.NO, null, startPerformUpdate, null, Alert.NO);
				}
			}
			
			private function startPerformUpdate(event:CloseEvent):void
			{
				if (event != null)
				{
					if (event.detail == Alert.NO) {return;}
				}
				
				_account.licenseCount =  stepLicenses.value.toString();
				_account.sampleContent = chkContentAccount.selected ? "1" : "0";
				_account.streaming = chkStream.selected ? "1" : "0";
				_account.mediasSize = ddStorage.selectedItem.value;
				_account.bandwidth = ddBandwidth.selectedItem.value;
				_account.billingType = ddBilling.selectedItem.value;
				
				// remove the extra row for the "Add user"
				for (var i:int = 0; i < _accountUsers.length; i++)
				{
					if (_accountUsers[i].accountId == "")
					{
						_accountUsers.removeItemAt(i);
						break;
					}
				}
								
				if (this.newAccount)
				{
					// Create the bucket for this account before we add
					this.enabled = false;
					account.bucket = createBucketName();
					_appManager.s3.putBucket(account.bucket, bucketCreateHandler);
					
					// Send an email to the new Account user to
					/* Skip the Email for now. They are already getting one for the new user 
					var emailBody:String = (new NewAccountEmail()).toString();
					
					_appManager.ses.sendEmail(txtContactEmail.text, _appManager.settings.email, "Welcome to StratoScreen", emailBody, true, sendEmailHandler);
					lblStatus.text = "Sending email to " + txtContactEmail.text;
					*/
				}
				else
				{
					performUpdate(WinProcess.ACCOUNT_UPDATE);
				}				
			}

			private function bucketCreateHandler(event:S3Event):void
			{
				// It is very unlikely, but possible that this bucket exists
				if (!event.success)
				{
					LogUtils.writeToLog(event.message, LogUtils.WARN);
					account.bucket = createBucketName();
					_appManager.s3.putBucket(account.bucket, bucketCreateHandler);
					return;
				}
				
				// Continue with the update
				performUpdate(WinProcess.ACCOUNT_ADD);
			}
			
			private function performUpdate(action:String):void
			{
				_winProcess = new WinProcess();				
				_winProcess.action = action;
				_winProcess.account = account;
				_winProcess.accountUsers = _accountUsers.source;
				_winProcess.addEventListener(CloseEvent.CLOSE, processCloseHandler);
				PopUpManager.addPopUp(_winProcess, this.parentApplication as DisplayObject, true);				
			}
			
			private function processCloseHandler(event:CloseEvent):void
			{
				if (!_winProcess.success)
				{
					var msg:String = "Account update failed.\r\n";
					msg += "Please try again.";					
					Alert.show(msg, "Accounts");					
				}
				else
				{
					// Once complete send the emails. 
					// We'll skip the success check for 
					for each(var user:Users in _accountUsers)
					{
						if (user.newUser)
						{							
							var emailBody:String = (new NewUserEmail()).toString();
							var pattern:RegExp = /\@@EMAIL@@/gi;
							emailBody = emailBody.replace(pattern, user.email);
							
							pattern = /\@@PASSWORD@@/gi;
							emailBody = emailBody.replace(pattern, user.decryptedPassword);

							pattern = /\@@PROVIDER@@/gi;
							emailBody = emailBody.replace(pattern, _appManager.settings.name);

							_appManager.ses.sendEmail(user.email, _appManager.settings.email, "Welcome to StratoScreen", emailBody, true, sendEmailHandler);
							lblStatus.text = "Sending email to " + user.email;
						}
					}
					
					this.canceled = false;
					closeHandler(null);
				}
			}			
						

			private function sendEmailHandler(event:SESEvent):void
			{
				if (!event.success)
				{
					Alert.show("Could not send email. Message:" + event.message, "Email Error");
					LogUtils.writeToLog(event.message);
				}
			}

			protected function btnDelete_clickHandler(event:MouseEvent):void
			{
				var message:String = "Warning. Deleting account will delete all users, data, and files for this account.\r\n";
				message += "Do you want to continue?";
				
				Alert.show(message, "Delete Account", Alert.YES | Alert.NO, null, answerHandler, null, Alert.NO);				
			}
			
			private function answerHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.NO) {return;}
				
				this.deleted = true;
				_winProcess = new WinProcess();
				_winProcess.action = WinProcess.ACCOUNT_DELETE;
				_winProcess.account = account;
				_winProcess.addEventListener(CloseEvent.CLOSE, processCloseHandler);
				PopUpManager.addPopUp(_winProcess, this.parentApplication as DisplayObject, true);
			}
			
			private function validFields():Boolean
			{
				var result:ValidationResultEvent = validAccount.validate();
				if (result.results != null)  {return false;}
				
				result = validCompany.validate();
				if (result.results != null)  {return false;}
				
				result = validEmail.validate();
				if (result.results != null)  {return false;}
				
				result = validContact.validate();
				if (result.results != null)  {return false;}

				result = validState.validate();
				if (result.results != null)  {return false;}

				result = validZip.validate();
				if (result.results != null)  {return false;}

				// If we are enabling streaming make sure there is a keypair entered
				if (chkStream.selected != _streaming)
				{
					if (chkStream.selected)
					{
						if (StringUtil.trim(_appManager.settings.decryptedKeyPair) == "")
						{
							Alert.show("Cannot enabled streaming for this account until a CloudFront Key Pair has been entered.", "Missing Key Pair");
							return false;
						}
					}
				}
				
				// Check for at least one manager
				var mgrFound:Boolean;
				for (var i:int = 0; i < _accountUsers.length; i++)
				{
					if (_accountUsers[i].type == Constants.USER_TYPE_MANAGER)
					{
						mgrFound = true;	
						break;
					}
				}	
				
				if (!mgrFound)
				{
					Alert.show("At least one manager must be created for this account", "Account Users");
					return false
				}
				
				// Check for duplicatate emails
				var emails:Array = Utils.clone(_allEmails);
				for (i = 0; i < _accountUsers.length; i++)
				{
					if(_accountUsers[i].newUser) {emails.push(_accountUsers[i].email);}
				}
				
				// Loop through twice and find dups
				for (i = 0; i < emails.length; i++)
				{
					for (var j:int = 0; j < emails.length; j++)
					{
						if ( i != j && emails[i] == emails[j])
						{
							Alert.show( emails[i] + " is already associated with another account.", "Duplicate Email");
							return false;							
						}
					}
				}
				
				// All is well
				return true;
			}

			private function createBucketName():String
			{				
				// Assume no buckets have been created when this process started
				
				// Start the bucket name with the region ID. i.e 
				// 1 = A, 2= B, etc
				var prefix:String = String.fromCharCode(_appManager.regionId + 64);
				var bucket:String = "";
				var ok:Boolean = false;
				do 
				{
					bucket = prefix + Utils.randomEasyReadString(Constants.BUCKET_NAME_LENGTH);
					bucket = bucket.toLowerCase();
					
					ok = true;
					for (var i:int = 0; i < _allBuckets.length; i++)
					{
						if (bucket.toLowerCase() == _allBuckets[i].toLowerCase())
						{
							ok = false;
							break
						}
					}					
					
				} while (!ok)
				
				return bucket;
			}

			
			private function filterDeleted(item:Object):Boolean
			{
				return !item.deleted;
			}

			protected function gridUsers_itemClickHandler(event:ListEvent):void
			{
				var user:Users = event.itemRenderer.data as Users;
				_winEditUser = new WinEditUser();
				_winEditUser.allEmails = _allEmails;
				
				if (user == null || user.type == "")	// They clicked the new button. Add a null check to be safe
				{
					// Create a new user and create a random password for them
					// They will be forced to change the password once logged in
					_winEditUser.user = new Users();
					_winEditUser.user.accountId = _account.itemName;
					_winEditUser.user.changePassword = "1";
					_winEditUser.user.decryptedPassword = "PWD" + Utils.randomEasyReadString(5);
					_winEditUser.user.newUser = true;
				}
				else
				{
					_winEditUser.user = Utils.copyClassObject(Users, user);					
				}

				_isDirty = true;
				_winEditUser.addEventListener(CloseEvent.CLOSE, editUserCloseHandler);
				PopUpManager.addPopUp(_winEditUser, DisplayObject(this.parentApplication), true);
			}
			
			private function editUserCloseHandler(event:CloseEvent):void
			{
				if (_winEditUser.canceled) {return;}
				
				// Loop through and find the matching account
				_winEditUser.user.updated = true;
				for (var i:int = 0; i < _accountUsers.length; i++)
				{
					if (_winEditUser.user.itemName == _accountUsers[i].itemName)
					{
						_accountUsers[i] = _winEditUser.user;
						return;
					}
				}
				
				// If we are here, this mustbe a new account
				_accountUsers.addItem(_winEditUser.user);				
			}			

			protected function btnPaid_clickHandler(event:MouseEvent):void
			{
				var winEdit:WinEditPaid = new WinEditPaid();
				winEdit.billingArray = _account.billingArray;
				winEdit.addEventListener(CloseEvent.CLOSE, winEditCloseHandler);
				
				PopUpManager.addPopUp(winEdit, this, true);
			}
			
			private function winEditCloseHandler(event:CloseEvent):void
			{
				var winEdit:WinEditPaid = event.target as WinEditPaid;
				if (winEdit.success) 
				{
					_account.billingArray = winEdit.billingArray;
					_isDirty = true;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label x="10" y="14" text="Account Name" fontWeight="bold" />
	<s:TextInput maxChars="25" id="txtName" y="10" width="370" 
				  x="115" change="{_isDirty = true}" text="@{_account.name}"/>
	<s:Label x="10" y="39" text="Company Name" fontWeight="bold"/>
	<s:TextInput maxChars="50" id="txtCompanyName" y="39" 
				 width="370"  x="115" change="{_isDirty = true}" text="@{_account.companyName}"/>
	<s:Label x="10" y="67" text="Address" fontWeight="bold"/>
	<s:TextInput maxChars="100" id="txtAddress1" y="67" 
				 width="370"  x="115" change="{_isDirty = true}" text="@{_account.address1}"/>
	<s:TextInput maxChars="100" id="txtAddress2" y="95" 
				 width="370"  x="115" change="{_isDirty = true}" text="@{_account.address2}"/>
	<s:TextInput maxChars="50" id="txtCity" y="123" width="251" x="115" change="{_isDirty = true}" text="@{_account.city}"/>
	<s:TextInput maxChars="2" id="txtState" y="123" restrict="A-Za-z" 
				 width="36"  x="374"  typographicCase="uppercase" change="{_isDirty = true}" text="@{_account.state}"/>
	<s:TextInput maxChars="10" id="txtZip" y="123" restrict="0-9\-" width="67" x="418" change="{_isDirty = true}" text="@{_account.zip}"/>
	<s:TextInput maxChars="50" id="txtPhone" y="151" width="295"  x="115" change="{_isDirty = true}" text="@{_account.phone}"/>
	<s:Label x="10" y="153" text="Phone" fontWeight="bold"/>
	<s:Label x="10" y="183" text="Contact Name" fontWeight="bold"/>
	<s:TextInput maxChars="50" id="txtContactName" y="179" 
				 width="295"  x="115" change="{_isDirty = true}" text="@{_account.contactName}"/>
	<s:Label x="10" y="211" text="Contact Email" fontWeight="bold"/>
	<s:TextInput maxChars="50" id="txtContactEmail" y="207" width="295" 
				  x="115" typographicCase="lowercase" change="{_isDirty = true}" text="@{_account.email}"/>
	<s:Button label="Update" id="btnUpdate" click="btnUpdate_clickHandler(event)" bottom="10" right="10" enabled="{_isDirty}"/>
	<s:Button label="Delete" id="btnDelete" bottom="10" right="96" enabled="{btnLock.selected}" click="btnDelete_clickHandler(event)"/>
	<s:Label x="10" y="413" text="Users" fontWeight="bold"/>
	<mx:DataGrid y="408" width="371" height="160" id="gridUsers" dataProvider="{_accountUsers}" itemClick="gridUsers_itemClickHandler(event)" right="10">
		<mx:columns>
			<mx:DataGridColumn headerText="Type" dataField="typeName" width="100"/>
			<mx:DataGridColumn headerText="EMail" dataField="email"/>
		</mx:columns>
	</mx:DataGrid>
	<components:LockButton id="btnLock" right="176" bottom="10"/>
	<s:Label x="10" y="388" text="Content Account" fontWeight="bold"/>
	<s:CheckBox x="115" y="384" label="The content in this account will be copied to all new accounts" fontSize="9" fontFamily="Arial" id="chkContentAccount" click="{_isDirty = true}"/>
	<s:Label x="10" y="242" text="Billing" fontWeight="bold"/>
	<s:DropDownList id="ddBilling" x="115" y="235" change="{_isDirty = true}" selectedIndex="0">
		<s:dataProvider>
			<s:ArrayCollection>
				<!-- Look at Accounts for the Billing type -->
				<fx:Object label="None" value="1" />
				<fx:Object label="AWS FPS" value="2" />	
			</s:ArrayCollection>
		</s:dataProvider>
	</s:DropDownList>
	<s:Label x="10" y="271" text="Screens" fontWeight="bold"/>
	<s:NumericStepper id="stepLicenses" x="115" y="265" width="111" change="{_isDirty = true}"
					  minimum="1" stepSize="1" toolTip="Base screens"/>

	<s:Button id="btnPaid" x="234" y="267" label="Edit Paid Screens"
			  click="btnPaid_clickHandler(event)"/>
	<!--
	<s:Label x="182" y="271" text="Standalone" fontWeight="bold"/>
	<s:NumericStepper x="257" y="265" id="stepStandAlone" stepSize="1" minimum="1" change="{_isDirty = true}" maximum="{stepLicenses.value}" enabled="false"/>
	-->
	
	<s:Label x="10" y="306" text="Bandwidth" fontWeight="bold"/>
	<s:DropDownList id="ddBandwidth" x="115" y="299">
		<s:dataProvider>
			<s:ArrayCollection>
				<fx:Object label="500 MB" value="536870912" />
				<fx:Object label="1 GB" value="1073741824" />	
				<fx:Object label="2 GB" value="2147483648" />
				<fx:Object label="5 GB" value="5368709120" />
			</s:ArrayCollection>
		</s:dataProvider>
	</s:DropDownList>
	<s:Label x="236" y="306" fontStyle="italic" fontWeight="normal" text="per screen"/>

	<s:Label x="10" y="335" text="Storage Max" fontWeight="bold"/>
	<s:DropDownList id="ddStorage" x="115" y="328" change="{_isDirty = true}">
		<s:dataProvider>
			<s:ArrayCollection>
				<fx:Object label="500 MB" value="536870912" />
				<fx:Object label="1 GB" value="1073741824" />	
				<fx:Object label="2 GB" value="2147483648" />
				<fx:Object label="5 GB" value="5368709120" />
			</s:ArrayCollection>
		</s:dataProvider>
	</s:DropDownList>
	<s:Label x="10" y="364" text="Allow Streaming" fontWeight="bold"/>
	<s:CheckBox x="115" y="360" id="chkStream"  click="{_isDirty = true}"/>
	<s:Label x="133" y="365" text="{_account.cloudFrontId}" textDecoration="none" fontStyle="italic"/>
	<s:controlBarContent>
		<s:Label id="lblStatus" />		
	</s:controlBarContent>

</s:TitleWindow>
