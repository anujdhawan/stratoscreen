<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="com.stratoscreen.view.*"
					width="100%" height="100%" creationComplete="creationCompleteHandler(event)" 
					show="showHandler(event)" xmlns:components="com.stratoscreen.components.*">
	<fx:Script>
		<![CDATA[			
			import com.stratoscreen.Constants;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.utils.StringUtil;
			
			[Bindable][Embed(source="/assets/icons/arrow_refresh.png")]
			private var iconRefresh:Class;			

			private var _shown:Boolean = false;
			private var _childData:ArrayCollection;
			
			public function get childData():ArrayCollection
			{
				return _childData;
			}

			public function set childData(value:ArrayCollection):void
			{
				// Reset the search box 
				if (_childData != null)
				{
					_childData.filterFunction = null;
					_childData.refresh();
				}
				
				searchBox.txtSearch.text = "";
				searchBox.showClear(false);
				searchClearHandler(null);

				_childData = value;
				_childData.filterFunction = searchFunction;
				_childData.refresh();
			}

			protected function creationCompleteHandler(event:FlexEvent):void
			{
			}
						
			protected function showHandler(event:FlexEvent):void
			{
				if (!_shown)
				{
					selectMediaTypes.addEventListener(SelectMediaTypes.SELECTION_CHANGE, typeSelectHandler);
					searchBox.addEventListener(SearchBox.SEARCH_SEARCH, searchHandler);
					searchBox.addEventListener(SearchBox.SEARCH_CLEARED, searchClearHandler);

					_shown = true;
				}
			}
			
			private function searchClearHandler(event:Event):void
			{
				// Reset the filter too
				btnFilter.selected = false;
				selectMediaTypes.reset();
				searchHandler(null);
			}
			
			private function searchHandler(event:Event):void
			{				
				if (_childData != null) {_childData.refresh();}
			}

			private function searchFunction(item:Object):Boolean
			{
				var itemName:String = item.name; 
				if (itemName == null) {return false;}
				
				// Filter by types if viewing media
				if (item.hasOwnProperty("mediaType"))
				{
					// Check the Filter types
					switch (item.mediaType)
					{
						case Constants.MEDIA_TYPE_AUDIO:
							if (!selectMediaTypes.audioSelected) {return false;}
							break;
						
						case Constants.MEDIA_TYPE_IMAGE:
							if (!selectMediaTypes.imagesSelected) {return false;}
							break;
						
						case Constants.MEDIA_TYPE_SWF:
							if (!selectMediaTypes.swfsSelected) {return false;}
							break;
						
						case Constants.MEDIA_TYPE_VIDEO:
							if (!selectMediaTypes.videoSelected) {return false;}
							break;
					}
				}
				
				itemName = itemName.toLowerCase();
				
				var searchText:String = searchBox.txtSearch.text.toLowerCase();
				searchText = StringUtil.trim(searchText);
								
				return itemName.indexOf(searchText) >= 0;
			}
			
			private function btnRefresh_clickHandler(event:Event):void
			{
				searchHandler(null);
				Object(vsMain.selectedChild).refresh();
			}
			

			protected function vsMain_changeHandler(event:IndexChangedEvent):void
			{
			}

			private function typeSelectHandler(event:Event):void
			{
				searchBox.showClear(!selectMediaTypes.allSelected);
				_childData.refresh();
			}
		]]>
	</fx:Script>
	<s:HGroup right="10" top="10" width="40%" gap="0">
		<components:IconButton id="btnRefresh" icon="{iconRefresh}" toolTip="Refresh data" click="btnRefresh_clickHandler(event)" />
		<mx:Spacer width="4" />
		<components:SearchBox id="searchBox" width="100%"  />
		<mx:Spacer width="{vsMain.selectedIndex == 0 ? 4 : 0}"/>
		<components:FilterButton right="10" top="10" id="btnFilter" visible="{vsMain.selectedIndex == 0}"
								 width="{vsMain.selectedIndex == 0 ? 22 : 0}"/>
	</s:HGroup>	
	<s:PopUpAnchor right="136" top="33" id="popUpTypes" displayPopUp="{btnFilter.selected}" >
		<components:SelectMediaTypes id="selectMediaTypes" />
	</s:PopUpAnchor>
	<mx:LinkBar x="10" y="10" dataProvider="{vsMain}" selectedIndex="0" />
	<mx:ViewStack id="vsMain" width="100%" height="100%" x="5" y="40"  change="vsMain_changeHandler(event)">
		<view:NavMediaMedia id="navMediaMedia" label="Media" icon="@Embed(source='/assets/icons/image.png')" />
		<view:NavMediaOverlay id="navMediaOverlay" label="Media Overlays" icon="@Embed(source='/assets/icons/image_palette.png')" />
		<view:NavMediaGroup id="navMediaGroup" label="Media Groups" icon="@Embed(source='/assets/icons/pictures.png')" />
		<view:NavMediaGroupOverlay id="navMediaGroupOverlay" label="Media Group Overlays" icon="@Embed(source='/assets/icons/pictures_palette.png')" />
	</mx:ViewStack>
</s:NavigatorContent>
