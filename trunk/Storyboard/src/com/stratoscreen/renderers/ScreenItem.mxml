<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" autoDrawBackground="true" width="128" height="96" 
				creationComplete="creationCompleteHandler(event)" xmlns:components="com.stratoscreen.components.*">	
		<fx:Script>
		<![CDATA[
			import com.stratoscreen.Constants;
			import com.stratoscreen.managers.AppManager;
			import com.stratoscreen.managers.ImageCacheManager;
			import com.stratoscreen.model.ResizeRectangle;
			import com.stratoscreen.model.domains.ScreenDetail;
			import com.stratoscreen.model.domains.Screens;
			import com.stratoscreen.utils.ImageUtils;
			import com.stratoscreen.view.Storyboard;
			
			import mx.events.FlexEvent;
			
			public static var bucket:String;
			public static var S3Endpoint:String;
			private static var _appManager:AppManager;
			private static var _storyboard:Storyboard;
			
			[Bindable] private var _screen:Screens;
			private var _data:Object = null;
			private var _shown:Boolean;
			[Bindable] private var _maxWidth:int = 114;
			[Bindable] private var _maxHeight:int = 72;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.data = _screen;		// Draw the renderer
				_storyboard = this.parentApplication.storyboard;
				_appManager = this.parentApplication.appManager;
			}

			public override function get data():Object
			{
				return _data;
			}
			
			public override function set data(value:Object):void
			{
				if (_data == value) {return;} // the item renderer has not changed
				if (value == null) {return;}
				_data = value;
				_screen = value as Screens;
				
				// Show a difference in the TV status
				groupThumb.alpha = _screen.status == Screens.STATUS_PENDING ? 0.33 : 1;
				
				// Change the attributes of the screen if is active
				if ( _screen.status != Screens.STATUS_PENDING)
				{
					// Watch for legacy data
					var screenWidth:int = parseInt(_screen.screenWidth);
					var screenHeight:int = parseInt(_screen.screenHeight);
					if (screenWidth == 0) {screenWidth = _maxWidth;}
					if (screenHeight == 0) {screenHeight = _maxHeight;}
					
					var rect:Rectangle = new Rectangle(0,0, screenWidth , screenHeight );
					var aspectRect:Rectangle =  getAspect(rect);					
					groupScreen.width = aspectRect.width;
					groupScreen.height = aspectRect.height;
				}
								
				// The parent should have the detail already loaded  get it
				imgThumb.source = null;
				if (_screen.type == Screens.TYPE_SCREEN)
				{
					if (_screen.currentMediaId == "") {return;}	// We do not have any media yet
					if (_screen.isOnline) 
					{
						var thumbUrl:String = "https://" + S3Endpoint + "/" + bucket;
						thumbUrl += "/" + Constants.THUMB_PREFIX + _screen.currentMediaId + Constants.THUMB_EXTENSION; 				
						imgThumb.source = ImageCacheManager.getInstance().getImageByURL(thumbUrl);
						imgThumb.load();
					}
				}
			}
						
			protected function itemClickHandler(event:MouseEvent):void
			{
				_storyboard.navScreens.navScreensScreens.itemClick(this);
			}
			
			protected function imgThumb_completeHandler(event:Event):void
			{				
				// If this is a group we need to add the image into the stack
				var imageUtils:ImageUtils = new ImageUtils(_screen.viewMode);
				var rect:ResizeRectangle = imageUtils.getBestFit(event.target.content.width, event.target.content.height, 
					                                             groupScreen.width, groupScreen.height, false);
				imgThumb.x = rect.x;
				imgThumb.y = rect.y;
				imgThumb.width = rect.width;
				imgThumb.height = rect.height;
				imgThumb.visible = true;
			}
			
			protected function imgThumb_ioErrorHandler(event:IOErrorEvent):void
			{
				imgThumb.visible = false;
			}
			
			private function getAspect(rect:Rectangle):Rectangle
			{
				var aspectRect:Rectangle = new Rectangle(rect.x, rect.y, rect.width, rect.height);
				var ratio:Number;
				if (aspectRect.width > _maxWidth)
				{
					ratio = _maxWidth / aspectRect.width;
					aspectRect.width = _maxWidth;
					aspectRect.height = aspectRect.height * ratio; 
				}

				if (aspectRect.height > _maxHeight)
				{
					ratio = _maxHeight / aspectRect.height;
					aspectRect.height = _maxHeight;
					aspectRect.width = aspectRect.width * ratio; 
				}
				
				// Double check for odd shapes
				if (aspectRect.width > _maxWidth || aspectRect.height > _maxHeight)
				{
					aspectRect = getAspect(aspectRect);
				}
				
				return aspectRect;
			}

		]]>
		</fx:Script>
	<s:Group id="groupThumb" x="0" y="0" height="83" width="128" click="itemClickHandler(event)" >
		<s:Group id="groupScreen" maxWidth="{_maxWidth}" maxHeight="{_maxHeight}" width="114" height="72" clipAndEnableScrolling="true" horizontalCenter="0" verticalCenter="0">
			<mx:Image width="100%" height="100%" source="@Embed('/assets/images/tvBars.png')" 
					  visible="{_screen.device == Screens.DEVICE_STAND_ALONE}"  scaleContent="true" maintainAspectRatio="false" maintainProjectionCenter="true"/>
			<s:Rect id="rectOffline" width="100%" height="100%" visible="{_screen.device != Screens.DEVICE_STAND_ALONE}" >
				<s:fill>
					<s:LinearGradient rotation="-45">
						<s:GradientEntry color="#202020" />
						<s:GradientEntry color="#404040" />
						<s:GradientEntry color="#202020" />
					</s:LinearGradient>
				</s:fill>
			</s:Rect>		
			<mx:Image id="imgThumb" complete="imgThumb_completeHandler(event)"
					  ioError="imgThumb_ioErrorHandler(event)" maintainAspectRatio="false"/>
		</s:Group>
		
		<s:Rect x="{groupScreen.x}" y="{groupScreen.y}" height="{groupScreen.height}" width="{groupScreen.width}" >
			<s:stroke>
				<s:SolidColorStroke color="#000000" weight="4"/>
			</s:stroke>   
		</s:Rect>

		<s:Rect x="{groupScreen.x}" y="{groupScreen.y}" height="{groupScreen.height}" width="{groupScreen.width}">
			<s:stroke>
				<s:SolidColorStroke color="#404040" weight="2"/>
			</s:stroke>   
		</s:Rect>
			
		
		<mx:Image id="imgUnplugged" source="@Embed('/assets/icons/disconnect.png')" visible="{_screen.device == Screens.DEVICE_STAND_ALONE}"  
				  right="10" bottom="5" width="16" height="16"/>
	</s:Group>	
	<s:Label text="{_screen.name}" width="100%" left="0" bottom="0" textAlign="center" maxDisplayedLines="1"/>
</s:ItemRenderer>